# Set Options Settings
set ratios 2:3
set info size:time
set shell zsh
set shellopts '-eu'
set ifs "\n"
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/preview
set preview true
set drawbox true
set icons true
set ignorecase true

# Commands 
cmd bulk-rename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cat $index > $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -le $max ]; do
			a="$(cat $index | sed "${counter}q;d")"
			b="$(cat $index_edit | sed "${counter}q;d")"
			counter=$(($counter+1))
			
			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

cmd newfold ${{
    set -f
    read newd
    printf "Directory name: "
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}


cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" & exit;;
    esac
}}



cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper %cp "$f" ~/.config/wall.png && xwallpaper --zoom "$f"

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

cmd dragon %dragon-drop -a -x $fx
cmd dragon-stay %dragon-drop -a $fx
cmd dragon-individual %dragon-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

map zz wal -i "$f"


# File Openers
map ee $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

map f search 

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm $HOME/Scripts/Dragon/mvdragon
map dc $HOME/Scripts/Dragon/cpdragon
map dl $HOME/Scripts/Dragon/dlfile

# map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map bg setwallpaper
map o open_config
map <c-r> rename
map H top
map L bottom
map r reload
map C clear
map u unselect

map sr set ratios 2:3
map sR set ratios 1:5
map Sr set ratios 5:1

# Some Epicness
map br bulk-rename
map <C-n> newfold

# Movement
map gh cd ~
map gr cd /

map gd cd ~/Downloads
map gp cd ~/Pictures 
map gV cd ~/Videos 
map gvg cd ~/Videos/Physics/NPTEL/Group_Theory/
map gvs cd ~/Videos/Physics/NPTEL/Stat_Mech/
map gb cd ~/Books 

# map gc cd ~/.config
map gcc cd ~/.config
map gcp cd ~/.config/picom/
map gcn cd ~/.config/nvim/
map gcs cd ~/.config/sxhkd/
map gcl cd ~/.config/lf/
map gcb cd ~/.config/bspwm/
map gcz cd ~/.config/zsh/
map gcm cd ~/.config/mpv/
map gcx cd ~/.config/X11/
map gcv cd ~/.config/lvim/


map gei cd ~/College/sem4/_info/
map gem cd ~/College/sem4/EEE207/
map gea cd ~/College/sem4/EEE208/
map gec cd ~/College/sem4/EEE303/
map geo cd ~/College/sem4/EEE212/
map geg cd ~/College/sem4/GER101/
map geh cd ~/College/sem4/HUM110/
map gep cd ~/College/sem4/MAT202/
map ges cd ~/College/sem4/STS202/

map gG cd ~/GitHubRepos
map glb cd ~/.local/bin

map gm cd /media/

map cc cd ~/Coding/C++/
map cl cd ~/Coding/Lua/
map cp cd ~/Coding/Python/
map cr cd ~/Coding/R/
map gn cd ~/Notes

